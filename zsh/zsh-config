#!/bin/bash

startdirectory=$(pwd)
executiondirectory=$(dirname $0)
cd $executiondirectory

#====================================================
#=====================Functions======================
#Usage: zsh-error <error>
zsh_error() {
    echo -e "\033[31m$(basename $0): $1\033[0m" >&2
    return 1
}
zsh_debug() {
    [[ $debug -eq 1 ]] && echo -e "\033[33m${FUNCNAME[1]}: $1 => ${@:2}\033[0m"
    return 0
}
zsh_mdebug() {
    [[ $debug -eq 1 ]] && echo -e "\033[33m${FUNCNAME[1]}: $1\033[0m"
    return 0
}
zsh_verbose() {
    echo -e "\033[35m$@\033[0m"
    return 0
}

#Usage: install_packages [-q|--quiet]
install_zsh_packages() {
    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local quiet=''
    local verbose=''

    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet='&> /dev/null'
            ;;
        -v | --verbose)
            verbose='-v'
            ;;
        esac
        shift
    done

    [[ -n $verbose ]] && zsh_verbose "Installing the necessary packages"
    sudo apt-get install build-essential command-not-found curl git gnupg lsb-release zsh -y &>/dev/null

    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}

#Usage: fetch_antigen [-q|--quiet] [-v|--verbose]
fetch_antigen() {
    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local quiet=''
    local verbose=''

    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet='&> /dev/null'
            ;;
        -v | --verbose)
            verbose='-v'
            ;;
        esac
        shift
    done

    local sourcefile="git.io/antigen"
    local destpath="$HOME/.config/antigen"
    local destfile="$destpath/antigen.zsh"

    if [[ ! -e "$destfile" ]]; then
        (mkdir -p "$destpath" && [[ -n $verbose ]] && zsh_verbose "Created directory '$destpath'") 2>/dev/null
        if [[ $? -ne 0 ]]; then
            zsh_error "can't create directory $destpath"
            zsh_mdebug "Exiting ${FUNCNAME[0]} function"
            return 1
        fi

        zsh_mdebug "Fetching antigen file to '$destfile'"
        [[ -n $verbose ]] && zsh_verbose "Fetching antigen file to '$destfile'"

        curl -Ls "$sourcefile" -o "$destfile" &>/dev/null
        if [[ $? -ne 0 ]]; then
            zsh_error "can't retrieving file from '$sourcefile'"
            zsh_mdebug "Exiting ${FUNCNAME[0]} function"
            return 1
        fi

        zsh_mdebug "Antigen file '$destfile' fetching complete"
        [[ -n $verbose ]] && zsh_verbose "Antigen file '$destfile' fetching complete"
    else
        zsh_mdebug "The antigen file '$destfile' already exists"
        [[ -n $verbose ]] && zsh_verbose "The antigen file '$destfile' already exists"
    fi

    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}

#Usage: create_zshrc_file [-q|--quiet] [-v|--verbose] [-o|--override] [[-i|--input-file] file]
create_zshrc_file() {
    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local quiet=0
    local override=0
    local zshrctemplate='
    if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
    fi

    source ~/.config/antigen/antigen.zsh
    antigen use oh-my-zsh
    antigen bundle zsh-users/zsh-autosuggestions
    antigen bundle zsh-users/zsh-syntax-highlighting
    antigen bundle git
    antigen bundle heroku
    antigen bundle pip
    antigen bundle lein
    antigen bundle command-not-found
    antigen theme romkatv/powerlevel10k
    antigen apply

    alias cls=clear
    alias exit="exit 0"
    alias goraspi="ssh flo@raspi -p 1907"

    PATH="$PATH:."

    unset HISTFILE

    [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
'
    local destination="$HOME/.zshrc"
    local verbose=''
    # local user=''

    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet=1
            zsh_mdebug "Quiet mode enabled"
            ;;
        -v | --verbose)
            verbose='-v'
            zsh_mdebug "Verbose mode enabled"
            ;;
        -o | --override)
            override=1
            zsh_mdebug "Override mode enabled"
            ;;
        -i | --input-file)
            filelocation="$2"
            zsh_debug "set input file location to" "$filelocation"
            shift
            ;;
        esac
        shift
    done

    # if [[ -z "$user" ]]; then user=$USER; fi
    if [[ -n "$filelocation" ]]; then
        if [[ ! -e "$filelocation" ]]; then
            zsh_mdebug "Source file '$filelocation' does not exist"
            if [[ $quiet -eq 0 ]]; then
                zsh_error "Source file '$filelocation' does not exist"
            fi
            return 1
        fi

        # => Si existe et override = 1 ==> cp
        # => Si existe et override = 0 ==> rien
        # => Si existe pas ==> cp
        if [[ ! -e "$destination" ]] || ([[ -e "$destination" ]] && [[ $override -eq 1 ]]); then

            cp "$filelocation" "$destination"
            [[ $? -ne 0 ]] && zsh_error "error while copying file '$filelocation' to '$destination'" && return 1

            if [[ $override -eq 1 ]]; then
                zsh_mdebug "overriding file from '$filelocation' to  '$destination'"
                [[ -n $verbose ]] && zsh_verbose "overriding file from '$filelocation' to '$destination'"
            else
                zsh_mdebug "copying file from '$filelocation' to  '$destination'"
                [[ -n $verbose ]] && zsh_verbose "copying file from '$filelocation' to  '$destination'"
            fi
        else
            zsh_mdebug "the file '$destination' exists but cannot be replaced because of the 'override' option"
        fi
    else
        if [[ $override -eq 1 ]]; then
            zsh_mdebug "creating file ~/.zshrc with default configuration"
            [[ -n $verbose ]] && zsh_verbose "creating file '~/.zshrc' with default configuration"
            echo "$zshrctemplate" >~/.zshrc
        fi
    fi

    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}

#==================
#Copy settings based on user
#==================
copy_p10k() {
    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local filelocation="$executiondirectory/"
    local destination="$HOME/.p10k.zsh"
    local verbose=''

    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet='-q'
            zsh_mdebug "quiet mode enabled"
            ;;
        -v | --verbose)
            verbose='-v'
            zsh_mdebug "verbose mode enabled"
            ;;
        esac
        shift
    done

    #Choose the file based on user
    [[ $(id -u) = 0 ]] && filelocation+='.p10kroot.zsh' || filelocation+='.p10kflo.zsh'

    if [[ ! -e "$filelocation" ]]; then
        zsh_error "Source file '$filelocation' does not exist"
        return 1
    elif ! cp -n "$filelocation" "$destination" 2>/dev/null; then
        zsh_error "Parameter file copy error"
        return 1
    else
        zsh_mdebug "copying .p10k.zsh from $filelocation to $destination"
        [[ -n $verbose ]] && zsh_verbose "copying .p10k.zsh from $filelocation to $destination"
    fi

    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}

#Usage: change_shell_to_zsh [-q|--quiet] [[-u|--user] user]
change_shell_to_zsh() {
    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local quiet=0
    local user=$USER
    local verbose=''

    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet=1
            zsh_mdebug "quiet mode enabled"
            ;;
        -v | --verbose)
            verbose='-v'
            zsh_mdebug "verbose mode enabled"
            ;;
        -u | --user)
            if getent passwd "$2" >/dev/null 2>&1; then
                user="$2"
                shift
            else
                error "Unknown user: $2"
                return 2
            fi
            ;;
        esac
        shift
    done

    #Check if zsh is installed
    if ! dpkg -l zsh | grep -wq ii; then
        zsh_error 'You can''t change your shell to zsh because it is not installed !'
        zsh_error 'If you want to install it, execute "sudo apt install zsh"'
        return 1
    fi

    if grep -w "$user" /etc/passwd | cut -d ':' -f 7 | grep -wq '/bin/zsh'; then
        zsh_mdebug "The current shell is already zsh for $user"
        [[ -n $verbose ]] && zsh_verbose "The current shell is already zsh for $user"
    else
        local previousshell=$(grep -w "$user" /etc/passwd | cut -d ':' -f 7 | rev | cut -d '/' -f 1 | rev)
        [[ -n $verbose ]] && zsh_verbose "Shell change in progress from $previousshell to zsh for '$user'"
        zsh_mdebug "Shell change in progress from $previousshell to zsh for '$user'"
        chsh -s /bin/zsh $user
        [[ -n $verbose ]] && zsh_verbose "Change made for '$user'"
        zsh_mdebug "Change made for '$user'"
    fi

    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}
#====================================================

#====================================================
#===================Main Functions===================
init() {
    init_usage() {
        cat <<EOF
Usage: zsh-config init [args]
  -q, --quiet:              Quiet mode.
  -v, --verbose:            Verbose mode.
  -h, --help                Display this information.
EOF
    }

    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@
    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet='-q'
            zsh_mdebug "Quiet mode enabled"
            ;;
        -v | --verbose)
            verbose='-v'
            zsh_mdebug "Verbose mode enabled"
            ;;
        -h | --help)
            init_usage
            return 0
            ;;
        *)
            zsh_error "Unknown argument '$1'"
            init_usage
            return 1
            ;;
        esac
        shift
    done

    [[ -n $verbose ]] && zsh_verbose "Starting $(basename $0) ${FUNCNAME[0]}"

    eval install_zsh_packages "$quiet" "$verbose"
    if [[ $? -ne 0 ]]; then
        zsh_error "An error occurred while installing the packages"
        zsh_mdebug "Exiting ${FUNCNAME[0]} function"
        return 1
    fi

    eval fetch_antigen "$quiet" "$verbose"
    if [[ $? -ne 0 ]]; then
        zsh_error "An error occurred while retrieving the antigen file"
        zsh_mdebug "Exiting ${FUNCNAME[0]} function"
        return 1
    fi

    [[ -n $verbose ]] && zsh_verbose "Ending $(basename $0) ${FUNCNAME[0]}"
    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}

apply() {
    apply_usage() {
        cat <<EOF
Usage: zsh-config apply [args]
  -q, --quiet               Quiet mode.
  -v, --verbose             Verbose mode.
  -o, --override            Override mode, if this option is specified, 
                            the .zshrc file if it exists, will be overwritten.
  -t <file>,                Specify the template file to apply to .zshrc.
    --template <file>
  -h, --help                Display this information.
EOF
    }

    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local user=''

    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet='-q'
            zsh_mdebug "quiet mode enabled"
            ;;
        -v | --verbose)
            verbose='-v'
            zsh_mdebug "verbose mode enabled"
            ;;
        -t | --template)
            if [[ "$2" =~ ^- ]]; then
                zsh_error "option '$1' requieres an argument"
                return 1
            elif [[ ! -r "$startdirectory/$2" ]]; then
                zsh_error "'$startdirectory/$2' can't be used as .zshrc template"
                return 2
            else
                template="-i $startdirectory/$2"
                shift
                zsh_debug "set template to" "$startdirectory/$template"
            fi
            ;;
        -o | --override)
            override='-o'
            ;;
        -h | --help)
            apply_usage
            return 0
            ;;
        *)
            zsh_error "Unknown argument '$1'"
            apply_usage
            return 1
            ;;
        esac
        shift
    done

    [[ -n $verbose ]] && zsh_verbose "Starting $(basename $0) ${FUNCNAME[0]}"

    eval create_zshrc_file "$quiet" "$verbose" "$override" "$template"
    eval copy_p10k "$quiet" "$verbose"
    eval change_shell_to_zsh "$quiet" "$verbose"

    [[ -n $verbose ]] && zsh_verbose "Ending $(basename $0) ${FUNCNAME[0]}"
    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
    return 0
}

reset() {
    rm -rf "$HOME/.config/antigen" "$HOME/.antigen" "$HOME/.cache/p10k*" "$HOME/.cache/gitstatus"
    chsh -s /bin/bash
    rm -f "$HOME/.p10k.zsh"
    if ! grep -q /bin/zsh /etc/passwd; then
        sudo apt-get remove zsh -y &>/dev/null
        sudo apt-get autoremove -y &>/dev/null
    fi
}

help() {
    version
    echo "This script is useful for configuring zsh automatically."
    usage
    return 0
}

full() {
    full_usage() {
        cat <<EOF
Usage: zsh-config full [args]
  -q, --quiet               Quiet mode.
  -v, --verbose             Verbose mode.
  -o, --override            Override mode, if this option is specified, 
                            the .zshrc file if it exists, will be overwritten.
  -t <file>,                Specify the template file to apply to .zshrc.
    --template <file>
  -h, --help                Display this information.
EOF
    }
    local quiet=''
    local verbose=''
    local template=''
    local override=''
    while [[ $# -ne 0 ]]; do
        case "$1" in
        -q | --quiet)
            quiet='-q'
            ;;
        -v | --verbose)
            verbose='-v'
            ;;
        -t | --template)
            if [[ "$2" =~ ^- ]]; then
                zsh_error "option '$1' requieres an argument"
                return 1
            else
                template="-i $startdirectory/$2"
                shift
                zsh_debug "set template to" "$startdirectory/$template"
            fi
            ;;
        -o | --override)
            override='-o'
            ;;
        -h | --help)
            full_usage
            return 0
            ;;
        *)
            zsh_error "Unknown argument '$1'"
            full_usage
            return 1
            ;;
        esac
        shift
    done

    eval init "$quiet" "$verbose"
    eval apply "$quiet" "$verbose" "$template" "$override"

    return 0
}

version() {
    local version='v1.0.0'
    echo "Zsh-config $version"
}

usage(){
    cat <<EOF
Usage: zsh-config <command> [args]
  init         Initialize zsh-config to prepare for configuration.
  apply        Apply configuration to the current user.
  full         Full configuration of zsh-config.
  reset        Reset settings as before running zsh-config.
  help         Display this information.
  version      Display zsh-config version.
EOF
}

#====================================================

main() {
    zsh_mdebug "Enter in ${FUNCNAME[0]} function"
    zsh_debug 'Input args($@)' $@

    local args=''
    debug=0

    for arg in $@; do
        if echo "$arg" | grep -qe '--debug'; then
            debug=1
        elif [[ -z $command ]]; then
            command="$arg"
        else
            args="$args $arg"
        fi
    done
    zsh_debug "Command" $command
    zsh_debug "Command args" "'$args'"

    case "$command" in
    init)
        init $args
        ;;
    apply)
        apply $args
        ;;
    reset)
        reset $args
        ;;
    help)
        help
        ;;
    full)
        full $args
        ;;
    version)
        version
        ;;
    '')
        zsh_error "Please enter a command"
        usage
        exit 1
        ;;
    *)
        zsh_error "Unknown command $command"
        usage
        exit 1
        ;;
    esac

    zsh_mdebug "Exiting ${FUNCNAME[0]} function"
}

main $*
